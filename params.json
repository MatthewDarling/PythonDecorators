{"name":"PythonDecorators","tagline":"A presentation for EdmontonPy's August 2013 meeting - about decorators in Python. Here, you can read it in plain text or view as a slideshow. If you clone the repo and open the .org file within Emacs, you get live code evaluation and other fun stuff.","body":"Ways you can view the presentation:\r\n* [Online as plain text](EdmontonPyPresentation.org)\r\n* [Online as an HTML presentation](S5/Presentation.html)\r\n* Offline in Emacs, with code evaluation and org-present support - download the [org file](EdmontonPyPresentation.org), and you can attempt to follow the instructions below\r\n\r\nTechnical notes\r\n===============\r\n\r\nIf you're curious, my [Emacs setup](https://github.com/MatthewDarling/.emacs) is available. I used [org-present](https://github.com/rlister/org-present/) to do the heavy lifting. You'll want to add some hooks to org-present-mode so that it behaves properly - you can see my org-specific configuration at the time is in [this file](https://github.com/MatthewDarling/.emacs/blob/c5c3e54a12aef371f0a66fda0bdcd6ad6329fa8c/init-org.el). The stuff for org-present is at the bottom, should be pretty clear. Also, before running the various examples, you'll want to eval the code blocks under the \"Setup\" heading (it may work without doing that, I'm not sure).\r\n\r\nAlso, I recorded a really awesome/really fragile macro to execute the first code block in a \"slide\" with one button, and open up the \\*output\\* buffer. This worked out surprisingly well! You can see that [here](https://github.com/MatthewDarling/.emacs/blob/c5c3e54a12aef371f0a66fda0bdcd6ad6329fa8c/init-org.el#L66).\r\n\r\nI also used a script made in [AutoHotKey](autohotkey.com) to turn my PowerPoint-focused presenter remote into something actually useful. You can see that [here](https://github.com/MatthewDarling/PythonDecorators/blob/master/presenting.ahk).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}